import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:image_picker/image_picker.dart';

import '../../../../data/AuthRepository.dart';
import '../../../../data/media_repository.dart';
import '../../../../data/products_repository.dart';
import '../../../../models/Product.dart';

class AddProductViewModel extends GetxController {
  AuthRepository authRepository = Get.find();
  ProductsRepository productRepository = Get.find();
  MediaRepository mediaRepository = Get.find();

  var isSaving = false.obs;
  var isUploadingImage = false.obs;
  Rxn<XFile> pickedImageFile = Rxn<XFile>();

  Future<void> addProduct(
      String price,
      String title,
      String description,
      ) async {
    if (title.isEmpty) {
      Get.snackbar("Error", "Product Title cannot be empty");
      return;
    }

    if (description.isEmpty) {
      Get.snackbar("Error", "Description cannot be empty");
      return;
    }

    if (price.isEmpty) {
      Get.snackbar("Error", "Price cannot be empty");
      return;
    }

    if (double.tryParse(price) == null || double.parse(price) <= 0) {
      Get.snackbar("Error", "Price must be a positive number");
      return;
    }

    isSaving.value = true;

    try {
      Product product = Product(
        '', // ID will be generated by Firestore
        price,
        title,
        description,
      );
      if (pickedImageFile.value != null) {
        isUploadingImage.value = true;


        var imageResult = await mediaRepository.uploadImageFromXFile(pickedImageFile.value!);

        isUploadingImage.value = false;

        if (imageResult.isSuccessful) {
          product.image = imageResult.secureUrl;

        } else {
          Get.snackbar(
            "Image Upload Failed",
            imageResult.error?.message ?? "Failed to upload image. You can add the product without an image.",
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.orange,
            colorText: Colors.white,
            duration: const Duration(seconds: 4),
          );
          final shouldContinue = await Get.dialog<bool>(
            AlertDialog(
              title: const Text('Image Upload Failed'),
              content: const Text('Would you like to add the product without an image? You can edit it later to add an image.'),
              actions: [
                TextButton(
                  onPressed: () => Get.back(result: false),
                  child: const Text('Cancel'),
                ),
                ElevatedButton(
                  onPressed: () => Get.back(result: true),
                  child: const Text('Continue'),
                ),
              ],
            ),
          );

          if (shouldContinue != true) {
            isSaving.value = false;
            return;
          }
        }
      }
      await productRepository.addProduct(product);
      Get.back();
      Get.snackbar(
        "Success",
        "Product added successfully",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.green,
        colorText: Colors.white,
      );
      pickedImageFile.value = null;
      Get.back(result: true);
    } catch (e) {
      Get.snackbar(
        "Error",
        "An error occurred while adding product: ${e.toString()}",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
        duration: const Duration(seconds: 4),
      );
    } finally {
      isSaving.value = false;
      isUploadingImage.value = false;
    }
  }
  Future<void> pickImage() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? pickedImage = await picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 85,
      );

      if (pickedImage != null) {
        pickedImageFile.value = pickedImage;

        Get.snackbar(
          "Image Selected",
          "Image selected successfully",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.green,
          colorText: Colors.white,
          duration: const Duration(seconds: 1),
        );
      }
    } catch (e) {
      Get.snackbar(
        "Error",
        "Failed to pick image: ${e.toString()}",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    }
  }

  Future<void> pickImageFromCamera() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? pickedImage = await picker.pickImage(
        source: ImageSource.camera,
        maxWidth: 1024,
        maxHeight: 1024,
        imageQuality: 85,
      );

      if (pickedImage != null) {
        pickedImageFile.value = pickedImage;

        Get.snackbar(
          "Photo Taken",
          "Photo captured successfully",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.green,
          colorText: Colors.white,
          duration: const Duration(seconds: 1),
        );
      }
    } catch (e) {
      Get.snackbar(
        "Error",
        "Failed to take photo: ${e.toString()}",
        snackPosition: SnackPosition.BOTTOM,
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    }
  }

  void clearImage() {
    pickedImageFile.value = null;

    Get.snackbar(
      "Image Removed",
      "Image cleared successfully",
      snackPosition: SnackPosition.BOTTOM,
      duration: const Duration(seconds: 1),
    );
  }

  void showImageSourceDialog() {
    Get.dialog(
      AlertDialog(
        title: const Text('Select Image Source'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.photo_library, color: Colors.blue),
              title: const Text('Gallery'),
              subtitle: const Text('Choose from gallery'),
              onTap: () {
                Get.back();
                pickImage();
              },
            ),
            const Divider(),
            ListTile(
              leading: const Icon(Icons.camera_alt, color: Colors.green),
              title: const Text('Camera'),
              subtitle: const Text('Take a new photo'),
              onTap: () {
                Get.back();
                pickImageFromCamera();
              },
            ),
          ],
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
  }
  Future<void> testCloudinaryConnection() async {
    try {
      isUploadingImage.value = true;
      final response = await mediaRepository.pickAndUploadImage(source: ImageSource.gallery);
      if (response != null && response.isSuccessful) {
        Get.snackbar(
          "Connection Test",
          "Cloudinary connection successful!",
          backgroundColor: Colors.green,
          colorText: Colors.white,
        );
      } else {
        Get.snackbar(
          "Connection Test",
          "Cloudinary connection failed: ${response?.error?.message ?? 'Unknown error'}",
          backgroundColor: Colors.red,
          colorText: Colors.white,
        );
      }
    } catch (e) {
      Get.snackbar(
        "Connection Test",
        "Error testing connection: $e",
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    } finally {
      isUploadingImage.value = false;
    }
  }
}
